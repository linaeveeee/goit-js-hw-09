{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,kBACnCC,UAAWF,SAASC,cAAc,iBAClCE,YAAaH,SAASC,cAAc,mBACpCG,YAAaJ,SAASC,cAAc,SACpCI,WAAYL,SAASC,cAAc,WAoCrC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA1CPV,EAAKM,YAAYW,iBAAiB,UAElC,SAAsBC,GACpBA,EAAMC,iBAENnB,EAAKO,WAAWa,UAAW,EAO3B,IALA,IAAIC,EAAQC,OAAOtB,EAAKC,WAAWsB,OAC/BC,EAAOF,OAAOtB,EAAKI,UAAUmB,OAC7BE,EAASH,OAAOtB,EAAKK,YAAYkB,OAG5BG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDlB,EAAckB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAInCc,EAEhBlB,YAAY6B,QACZrB,YAAW,WACTd,EAAKO,WAAWa,UAAW,C,GAC1BC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  promiseForm: document.querySelector('.form'),\n  promiseBtn: document.querySelector('button'),\n};\n\nrefs.promiseForm.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  refs.promiseBtn.disabled = true;\n\n  let delay = Number(refs.inputDelay.value);\n  let step = Number(refs.inputStep.value);\n  let amount = Number(refs.inputAmount.value);\n\n  let totalDelay = 0;\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    totalDelay += step;\n  }\n  promiseForm.reset();\n  setTimeout(() => {\n    refs.promiseBtn.disabled = false;\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","promiseForm","promiseBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","disabled","delay1","Number","value","step","amount","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.9323b3d1.js.map"}